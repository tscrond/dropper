// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (google_id, user_name, user_email, user_bucket)
VALUES ($1, $2, $3, $4)
ON CONFLICT (google_id) DO NOTHING
`

type CreateUserParams struct {
	GoogleID   string         `json:"google_id"`
	UserName   sql.NullString `json:"user_name"`
	UserEmail  string         `json:"user_email"`
	UserBucket sql.NullString `json:"user_bucket"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.GoogleID,
		arg.UserName,
		arg.UserEmail,
		arg.UserBucket,
	)
	return err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM users WHERE google_id = $1 RETURNING google_id, user_name, user_email, user_bucket
`

func (q *Queries) DeleteAccount(ctx context.Context, googleID string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, googleID)
	var i User
	err := row.Scan(
		&i.GoogleID,
		&i.UserName,
		&i.UserEmail,
		&i.UserBucket,
	)
	return i, err
}

const getUserBucketById = `-- name: GetUserBucketById :one
SELECT user_bucket FROM users WHERE google_id = $1
`

func (q *Queries) GetUserBucketById(ctx context.Context, googleID string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserBucketById, googleID)
	var user_bucket sql.NullString
	err := row.Scan(&user_bucket)
	return user_bucket, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT google_id, user_name, user_email, user_bucket FROM users WHERE user_email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.GoogleID,
		&i.UserName,
		&i.UserEmail,
		&i.UserBucket,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT google_id, user_name, user_email, user_bucket FROM users WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.GoogleID,
		&i.UserName,
		&i.UserEmail,
		&i.UserBucket,
	)
	return i, err
}

const updateUserBucketNameById = `-- name: UpdateUserBucketNameById :exec
UPDATE users SET user_bucket = $1 WHERE google_id = $2
`

type UpdateUserBucketNameByIdParams struct {
	UserBucket sql.NullString `json:"user_bucket"`
	GoogleID   string         `json:"google_id"`
}

func (q *Queries) UpdateUserBucketNameById(ctx context.Context, arg UpdateUserBucketNameByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBucketNameById, arg.UserBucket, arg.GoogleID)
	return err
}
