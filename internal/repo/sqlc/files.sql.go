// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getFileById = `-- name: GetFileById :one
SELECT id, owner_google_id, file_name, file_type, size, md5_checksum, private_download_token FROM files WHERE id = $1
`

func (q *Queries) GetFileById(ctx context.Context, id int32) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileById, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerGoogleID,
		&i.FileName,
		&i.FileType,
		&i.Size,
		&i.Md5Checksum,
		&i.PrivateDownloadToken,
	)
	return i, err
}

const getFileByOwnerAndName = `-- name: GetFileByOwnerAndName :one
SELECT id, md5_checksum
FROM files
WHERE owner_google_id = $1 AND file_name = $2
`

type GetFileByOwnerAndNameParams struct {
	OwnerGoogleID sql.NullString `json:"owner_google_id"`
	FileName      string         `json:"file_name"`
}

type GetFileByOwnerAndNameRow struct {
	ID          int32  `json:"id"`
	Md5Checksum string `json:"md5_checksum"`
}

func (q *Queries) GetFileByOwnerAndName(ctx context.Context, arg GetFileByOwnerAndNameParams) (GetFileByOwnerAndNameRow, error) {
	row := q.db.QueryRowContext(ctx, getFileByOwnerAndName, arg.OwnerGoogleID, arg.FileName)
	var i GetFileByOwnerAndNameRow
	err := row.Scan(&i.ID, &i.Md5Checksum)
	return i, err
}

const getFileIdFromToken = `-- name: GetFileIdFromToken :one
SELECT id FROM files WHERE private_download_token = $1
`

func (q *Queries) GetFileIdFromToken(ctx context.Context, privateDownloadToken sql.NullString) (int32, error) {
	row := q.db.QueryRowContext(ctx, getFileIdFromToken, privateDownloadToken)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getFilesByOwner = `-- name: GetFilesByOwner :many

SELECT id, owner_google_id, file_name, file_type, size, md5_checksum, private_download_token FROM files WHERE owner_google_id = $1
`

// -- name: InsertFileReturningID :one
// INSERT INTO files (owner_google_id, file_name, file_type, size, md5_checksum, private_download_token)
// VALUES ($1, $2, $3, $4, $5, $6)
// ON CONFLICT (owner_google_id, md5_checksum) DO NOTHING
// RETURNING id;
func (q *Queries) GetFilesByOwner(ctx context.Context, ownerGoogleID sql.NullString) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByOwner, ownerGoogleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.OwnerGoogleID,
			&i.FileName,
			&i.FileType,
			&i.Size,
			&i.Md5Checksum,
			&i.PrivateDownloadToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFile = `-- name: InsertFile :one
INSERT INTO files (owner_google_id, file_name, file_type, size, md5_checksum, private_download_token)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (owner_google_id, md5_checksum,file_name) DO NOTHING
RETURNING id, owner_google_id, file_name, file_type, size, md5_checksum, private_download_token
`

type InsertFileParams struct {
	OwnerGoogleID        sql.NullString `json:"owner_google_id"`
	FileName             string         `json:"file_name"`
	FileType             sql.NullString `json:"file_type"`
	Size                 sql.NullInt64  `json:"size"`
	Md5Checksum          string         `json:"md5_checksum"`
	PrivateDownloadToken sql.NullString `json:"private_download_token"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, insertFile,
		arg.OwnerGoogleID,
		arg.FileName,
		arg.FileType,
		arg.Size,
		arg.Md5Checksum,
		arg.PrivateDownloadToken,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerGoogleID,
		&i.FileName,
		&i.FileType,
		&i.Size,
		&i.Md5Checksum,
		&i.PrivateDownloadToken,
	)
	return i, err
}
