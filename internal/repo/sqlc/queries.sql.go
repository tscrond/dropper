// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (google_id, user_name, user_email)
VALUES ($1, $2, $3)
ON CONFLICT (google_id) DO NOTHING
`

type CreateUserParams struct {
	GoogleID  string         `json:"google_id"`
	UserName  sql.NullString `json:"user_name"`
	UserEmail string         `json:"user_email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.GoogleID, arg.UserName, arg.UserEmail)
	return err
}

const getFilesByOwner = `-- name: GetFilesByOwner :many
SELECT id, owner_google_id, file_name, file_type, size, md5_checksum FROM files WHERE owner_google_id = $1
`

func (q *Queries) GetFilesByOwner(ctx context.Context, ownerGoogleID sql.NullString) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByOwner, ownerGoogleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.OwnerGoogleID,
			&i.FileName,
			&i.FileType,
			&i.Size,
			&i.Md5Checksum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesSharedWithUser = `-- name: GetFilesSharedWithUser :many
SELECT f.id, f.owner_google_id, f.file_name, f.file_type, f.size, f.md5_checksum
FROM shares s
JOIN files f ON s.file_id = f.id
WHERE s.shared_for = $1
`

func (q *Queries) GetFilesSharedWithUser(ctx context.Context, sharedFor sql.NullString) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesSharedWithUser, sharedFor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.OwnerGoogleID,
			&i.FileName,
			&i.FileType,
			&i.Size,
			&i.Md5Checksum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT google_id, user_name, user_email FROM users WHERE user_email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, userEmail)
	var i User
	err := row.Scan(&i.GoogleID, &i.UserName, &i.UserEmail)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT google_id, user_name, user_email FROM users WHERE google_id = $1
`

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(&i.GoogleID, &i.UserName, &i.UserEmail)
	return i, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO files (owner_google_id, file_name, file_type, size, md5_checksum)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, owner_google_id, file_name, file_type, size, md5_checksum
`

type InsertFileParams struct {
	OwnerGoogleID sql.NullString `json:"owner_google_id"`
	FileName      string         `json:"file_name"`
	FileType      sql.NullString `json:"file_type"`
	Size          sql.NullInt64  `json:"size"`
	Md5Checksum   string         `json:"md5_checksum"`
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, insertFile,
		arg.OwnerGoogleID,
		arg.FileName,
		arg.FileType,
		arg.Size,
		arg.Md5Checksum,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerGoogleID,
		&i.FileName,
		&i.FileType,
		&i.Size,
		&i.Md5Checksum,
	)
	return i, err
}

const shareFile = `-- name: ShareFile :one
INSERT INTO shares (shared_by, shared_for, file_id, sharing_link)
VALUES ($1, $2, $3, $4)
RETURNING id, shared_by, shared_for, file_id, sharing_link, created_at
`

type ShareFileParams struct {
	SharedBy    sql.NullString `json:"shared_by"`
	SharedFor   sql.NullString `json:"shared_for"`
	FileID      sql.NullInt32  `json:"file_id"`
	SharingLink sql.NullString `json:"sharing_link"`
}

func (q *Queries) ShareFile(ctx context.Context, arg ShareFileParams) (Share, error) {
	row := q.db.QueryRowContext(ctx, shareFile,
		arg.SharedBy,
		arg.SharedFor,
		arg.FileID,
		arg.SharingLink,
	)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.SharedBy,
		&i.SharedFor,
		&i.FileID,
		&i.SharingLink,
		&i.CreatedAt,
	)
	return i, err
}
