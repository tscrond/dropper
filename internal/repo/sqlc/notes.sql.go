// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notes.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getNoteForFileById = `-- name: GetNoteForFileById :one
SELECT id, user_id, file_id, content FROM notes WHERE user_id = $1 AND file_id = $2
`

type GetNoteForFileByIdParams struct {
	UserID sql.NullString `json:"user_id"`
	FileID sql.NullInt32  `json:"file_id"`
}

func (q *Queries) GetNoteForFileById(ctx context.Context, arg GetNoteForFileByIdParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNoteForFileById, arg.UserID, arg.FileID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileID,
		&i.Content,
	)
	return i, err
}

const updateNoteForFile = `-- name: UpdateNoteForFile :one
INSERT INTO notes (user_id, file_id, content)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, file_id) 
DO UPDATE SET content = EXCLUDED.content
RETURNING id, user_id, file_id, content
`

type UpdateNoteForFileParams struct {
	UserID  sql.NullString `json:"user_id"`
	FileID  sql.NullInt32  `json:"file_id"`
	Content string         `json:"content"`
}

func (q *Queries) UpdateNoteForFile(ctx context.Context, arg UpdateNoteForFileParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNoteForFile, arg.UserID, arg.FileID, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileID,
		&i.Content,
	)
	return i, err
}
