// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: private_downloads.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getPrivateDownloadTokenByFileName = `-- name: GetPrivateDownloadTokenByFileName :one
SELECT private_download_token FROM files WHERE file_name = $1
`

func (q *Queries) GetPrivateDownloadTokenByFileName(ctx context.Context, fileName string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getPrivateDownloadTokenByFileName, fileName)
	var private_download_token sql.NullString
	err := row.Scan(&private_download_token)
	return private_download_token, err
}

const listFileIDsWithoutPrivateToken = `-- name: ListFileIDsWithoutPrivateToken :many
SELECT id FROM files
WHERE private_download_token IS NULL
`

func (q *Queries) ListFileIDsWithoutPrivateToken(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listFileIDsWithoutPrivateToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrivateDownloadToken = `-- name: UpdatePrivateDownloadToken :exec
UPDATE files
SET private_download_token = $1
WHERE id = $2
`

type UpdatePrivateDownloadTokenParams struct {
	PrivateDownloadToken sql.NullString `json:"private_download_token"`
	ID                   int32          `json:"id"`
}

func (q *Queries) UpdatePrivateDownloadToken(ctx context.Context, arg UpdatePrivateDownloadTokenParams) error {
	_, err := q.db.ExecContext(ctx, updatePrivateDownloadToken, arg.PrivateDownloadToken, arg.ID)
	return err
}
